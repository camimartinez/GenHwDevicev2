«REM»

ALMA - Atacama Large Millimiter Array
(c) European Southern Observatory, 2017
Copyright by ESO (in the framework of the ALMA collaboration),
All rights reserved

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
MA 02111-1307  USA

«ENDREM»

«IMPORT alma::control::datamodel::meta::base»
«IMPORT alma::control::datamodel::meta::eth»

«EXTENSION alma::control::templates::extensions::eth::util»

«DEFINE Root FOR DeviceModel»
    «EXPAND SWModuleDef»
«ENDDEFINE»

«DEFINE SWModuleDef FOR DeviceModel»
«FILE DirPath()+"/idl/"+Assembly()+"Base.idl"-»
#ifndef «Assembly()»Base_idl
#define «Assembly()»Base_idl
/**
 * ALMA - Atacama Large Millimiter Array
 * (c) European Southern Observatory, 2017
 * Copyright by ESO (in the framework of the ALMA collaboration),
 * All rights reserved
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 * MA 02111-1307  USA
 *
 *             WARNING! DO NOT MODIFY THIS FILE!
 *  ---------------------------------------------------------
 * | This is generated code!  Do not modify this file.       |
 * | Any changes will be lost when the file is re-generated. |
 *  ---------------------------------------------------------
 *
 *  Id: BaseIDL.xpt
 *
 */


/// External interface to the hardware assembly: Control::«Assembly()».


«IF Extends() != "none"»
#include <«Extends()».idl>
«ELSE»
#include <HardwareDevice.idl>
«ENDIF»
#include <ControlExceptions.idl>
#include <EthernetDeviceExceptions.idl>
#include <baci.idl>


#pragma prefix "alma"


module Control
{
    /// «Description()»
    interface «Assembly()»Base:
«IF Extends() != "none"»
    «Extends()»
«ELSE»
    Control::HardwareDevice
«ENDIF»
    {
        /// Returns true if the device is simulated, false
        /// if real hardware is accessed.
        boolean isSimulated();

        /////////////////////
        // BACI Properties //
        /////////////////////
«FOREACH (Set[MonitorPoint]) monitorPoints.contents AS x»
    «IF x.IsMonitored()»
        /// «x.Description()»
        «IF x.DisplayUnits() == "pattern"»
        readonly attribute ACS::ROpattern «x.MPName()»;
        «ELSE»
            «IF x.IsDataArray()»
        readonly attribute ACS::RO«x.DataToBACIType()»Seq «x.MPName()»;
            «ELSE»
        readonly attribute ACS::RO«x.DataToBACIType()» «x.MPName()»;
            «ENDIF»
        «ENDIF»
    «ENDIF»
«ENDFOREACH»

        ////////////////////////////////////////
        // IDL Definitions for Monitor Points //
        ////////////////////////////////////////
«FOREACH (Set[MonitorPoint]) monitorPoints.contents AS x»
«IF x.IsExternal()»
        /// «x.Description()»
        «IF x.IsDataArray()»
        «x.DataToIDLSeqType()» GET_«x.MPName()»(out ACS::Time timestamp) raises
            (EthernetDeviceExceptions::SocketOperationFailedEx,
            EthernetDeviceExceptions::IllegalParameterEx,
            ControlExceptions::INACTErrorEx);
        «ELSE»
        «x.DataToIDLType()» GET_«x.MPName()»(out ACS::Time timestamp) raises
            (EthernetDeviceExceptions::SocketOperationFailedEx,
            EthernetDeviceExceptions::IllegalParameterEx,
            ControlExceptions::INACTErrorEx);
        «ENDIF»
    «ENDIF»
«ENDFOREACH»

        ////////////////////////////////////////
        // IDL Definitions for Control Points //
        ////////////////////////////////////////
«FOREACH (Set[ControlPoint]) controlPoints.contents AS x»
    «IF x.IsExternal()»
        /// «x.Description()»
        «IF x.IsDataArray()»
        void SET_«x.CPName()»(in «x.DataToIDLSeqType()» param) raises
        «ELSEIF x.DataType() == "void"»
        void SET_«x.CPName()»() raises
        «ELSE»
        void SET_«x.CPName()»(in «x.DataToIDLType()» param) raises
        «ENDIF»
            (EthernetDeviceExceptions::SocketOperationFailedEx,
            EthernetDeviceExceptions::IllegalParameterEx,
            ControlExceptions::INACTErrorEx);
    «ENDIF»
«ENDFOREACH»
    };
};
#endif
«ENDFILE»
«ENDDEFINE»