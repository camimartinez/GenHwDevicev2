«REM»
ALMA - Atacama Large Millimiter Array
(c) European Southern Observatory, 2017
Copyright by ESO (in the framework of the ALMA collaboration),
All rights reserved

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
MA 02111-1307  USA
«ENDREM»

«IMPORT alma::control::datamodel::meta::base»
«IMPORT alma::control::datamodel::meta::amb»

«EXTENSION alma::control::templates::extensions::amb::util»

«DEFINE Root FOR DeviceModel»
  «IF !IsMonitorDBOnly()»
    «EXPAND SWModuleDef»
  «ENDIF»
«ENDDEFINE»

«DEFINE SWModuleDef FOR DeviceModel»
«FILE DirPath()+"/include/"+Assembly()+"SimBase.h"»
#ifndef «Assembly()»SimBase_h
#define «Assembly()»SimBase_h
/**
 * ALMA - Atacama Large Millimiter Array
 * (c) European Southern Observatory, 2017
 * Copyright by ESO (in the framework of the ALMA collaboration),
 * All rights reserved
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 * MA 02111-1307  USA
 *
 *             WARNING! DO NOT MODIFY THIS FILE!
 *  ---------------------------------------------------------
 * | This is generated code!  Do not modify this file.       |
 * | Any changes will be lost when the file is re-generated. |
 *  ---------------------------------------------------------
 *
 * Id: SimBaseDotH.xpt
 *
 */

#ifndef __cplusplus
#error This is a C++ include file and cannot be used from plain C.
#endif


#include <«Assembly()»Impl.h>


/// The «Assembly()»SimBase class is the base class for the
/// «DeviceName()»Impl simulation.
/// <ul>
/// <li> Device:   «DeviceName()»
/// <li> Assembly: «Assembly()»
/// <li> Parent:   «Parent()»
/// <li> Node:     «NodeAddress()»
/// <li> Channel:  «Channel()»
/// </ul>
/// <p>
/// «DescriptionL1()»
class «Assembly()»SimBase: public «Assembly()»Impl
{
    public:
    /// Destructor
    virtual ~«Assembly()»SimBase();

    protected:
    /// Constructor. Never instanciate this class directly!
    «Assembly()»SimBase(const ACE_CString& name, maci::ContainerServices* cs);

«FOREACH (Set[MonitorPoint]) monitorPoints.resources.contents AS x»
    «EXPAND ProtectedMonitorPoint FOR x»
«ENDFOREACH»
«FOREACH (Set[ControlPoint]) controlPoints.resources.contents AS x»
    «EXPAND ProtectedControlPoint FOR x»
«ENDFOREACH»
    private:
    /// Default constructor. Never instanciate this class directly!
    «Assembly()»SimBase();

    /// ALMA coding standards: copy constructor is disabled.
    «Assembly()»SimBase(const «Assembly()»SimBase&);

    /// ALMA coding standards: assignment operator is disabled.
    «Assembly()»SimBase& operator=(const «Assembly()»SimBase&);
};
#endif
«ENDFILE»
«ENDDEFINE»

«DEFINE ProtectedMonitorPoint FOR MonitorPoint»
    /// MonitorPoint: «MPName()»
    «IF !IsExternal() || !IsMonitored()»
    /// «DescriptionFormattedL5()»
    «ENDIF»
    «REM»
    a. Major monitor method
    «ENDREM»
    «IF IsImplemented()»
        «IF !IsDependent()»
    /// \exception ControlExceptions::INACTErrorExImpl
            «IF IsWorldDataArray()»
    virtual std::vector< «WorldDataToCPPType()» > get«AltMPName()»(
       ACS::Time& timestamp);
            «ELSE»
    virtual «WorldDataToCPPType()» get«AltMPName()»(ACS::Time& timestamp);
            «ENDIF»
        «ENDIF»
    «ENDIF»
«ENDDEFINE»

«DEFINE ProtectedControlPoint FOR ControlPoint»
    «IF !IsDependent()»
    /// ControlPoint: «CPName()»
        «IF !IsExternal()»
    /// «DescriptionFormattedL5()»
        «ENDIF»
    «REM»
    a. Major control method
    «ENDREM»
    «REM»
    The "if hasDependents" part of this is not yet implemented.
    «ENDREM»
    /// \exception ControlExceptions::INACTErrorExImpl
        «IF Implement()»
    virtual «cppReturns()» set«AltCPName()»«cppDeclaration()»;
        «ELSE»
    virtual «cppReturns()» set«AltCPName()»«cppDeclaration()» = 0;
        «ENDIF»
    «ENDIF»
«ENDDEFINE»